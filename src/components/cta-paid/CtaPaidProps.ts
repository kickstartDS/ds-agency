/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Headline for the module element
 */
export type ModuleHeadline = string;
/**
 * Subheadline below the module headline
 */
export type ModuleSubheadline = string;
/**
 * Info text for the module element
 */
export type ModuleText = string;
/**
 * Visually highlight the text
 */
export type HighlightText = boolean;
/**
 * Set the width of the content to the full width of the element
 */
export type Width = boolean;
/**
 * Text content to display inside the button
 */
export type Label = string;
/**
 * Choose an icon
 */
export type Icon = string;
/**
 * Target that should be linked, makes the button behave like a link semantically
 */
export type Target = string;
/**
 * Background color for the whole element
 */
export type BackgroundColor = string;
/**
 * Background image for the whole element
 */
export type BackgroundImage = string;
/**
 * Image source to use
 */
export type ImageSource = string;
/**
 * Toggle padding of the image
 */
export type Padding = boolean;
/**
 * Image description
 */
export type AltText = string;
/**
 * Switch to displaying the image after the text on mobile
 */
export type MobileImageAfterText = boolean;
/**
 * Switch to displaying the image after the text on desktop
 */
export type DesktopImageAfterText = boolean;
/**
 * Choose the alginment of the text
 */
export type TextAlignment = "left" | "center";
/**
 * Select a vertical alignment for the image
 */
export type VerticalAlignmentOfTheContent = "center" | "top" | "bottom";

export interface CtaPaidProps {
  headline?: ModuleHeadline;
  sub?: ModuleSubheadline;
  text?: ModuleText;
  highlightText?: HighlightText;
  fullWidth?: Width;
  buttons?: Button[];
  backgroundColor?: BackgroundColor;
  backgroundImage?: BackgroundImage;
  image?: Image;
  order?: Order;
  textAlign?: TextAlignment;
  contentAlign?: VerticalAlignmentOfTheContent;
}
export interface Button {
  label?: Label;
  icon?: Icon;
  target?: Target;
}
/**
 * Image displayed alongside the text content
 */
export interface Image {
  src?: ImageSource;
  padding?: Padding;
  alt?: AltText;
}
/**
 * Choose what comes first on mobile and desktop: image or text
 */
export interface Order {
  mobileImageLast?: MobileImageAfterText;
  desktopImageLast?: DesktopImageAfterText;
}
