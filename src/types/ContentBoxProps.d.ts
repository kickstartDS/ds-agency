declare module "@kickstartds/base/lib/content-box/typing" {
  /* eslint-disable */
  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  /**
   * Choose one of the set ratios, all ratios except `none` stretch the image to 100% width
   */
  export type ImageRatio = "none" | "4:3" | "16:9" | "1:1";
  /**
   * Choose an alignment for the box. For the image it only applies for a `ratio` value of `none`
   */
  export type Alignment = "left" | "center" | "right";
  /**
   * Select an image to display inside the content box, at the top
   */
  export type ImageSource = string;
  /**
   * Topic for the content box. Displayed before the text, in bold
   */
  export type Topic = string;
  /**
   * Text for the content box
   */
  export type TextContent = string;
  /**
   * Text content to display inside the button
   */
  export type Label = string;
  /**
   * Target that should be linked, makes the button behave like a link semantically
   */
  export type Target = string;
  /**
   * Variant of button to be used
   */
  export type Variant = "primary" | "secondary" | "tertiary";
  /**
   * Choose an icon
   */
  export type Icon = string;
  /**
   * Size of button to use
   */
  export type Size = "small" | "medium" | "large";
  /**
   * Whether the button should be disabled
   */
  export type Disabled = boolean;
  /**
   * Toggles visibility of the link
   */
  export type DisplayLink = boolean;
  /**
   * Add additional css classes that should be applied to the content box
   */
  export type AdditionalClasses = string;
  /**
   * Optional custom component identifier
   */
  export type KsComponentAttribute = string;

  /**
   * Component to display content in a condensed, boxed form
   */
  export interface ContentBoxProps {
    ratio?: ImageRatio;
    alignement?: Alignment;
    image?: ImageSource;
    topic?: Topic;
    text?: TextContent;
    link?: Button;
    className?: AdditionalClasses;
    component?: KsComponentAttribute;
  }
  /**
   * Component used for user interaction
   */
  export interface Button {
    label: Label;
    target?: Target;
    variant?: Variant;
    icon?: Icon;
    size?: Size;
    disabled?: Disabled;
    enabled?: DisplayLink;
  }
}
