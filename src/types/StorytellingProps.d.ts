declare module "@kickstartds/content/lib/storytelling/typing" {
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

import type {HeadlineProps} from "@kickstartds/base/lib/headline/typing";
import type {ButtonProps} from "@kickstartds/base/lib/button/typing";

/**
 * Background image for the whole element
 */
export type BackgroundImage = string;
/**
 * Background color for the whole element
 */
export type BackgroundColor = string;
/**
 * Display a full sized version of the image
 */
export type FullSizeImage = boolean;
/**
 * Image source to use
 */
export type ImageSource = string;
/**
 * Select an aspect ratio to use for cropping and displaying the image
 */
export type ImageAspectRatio = "4:3" | "3:2" | "16:9" | "1:1" | "none";
/**
 * Select a vertical alignment for the image
 */
export type ImageVerticalAlignment = "center" | "top" | "top-edge" | "bottom" | "bottom-edge";
/**
 * Select a horizontal alignment for the image
 */
export type ImageHorizontalAlignment = "center" | "left" | "left-edge" | "right" | "right-edge";
/**
 * Switch to displaying the image after the text on mobile
 */
export type MobileImageAfterText = boolean;
/**
 * Switch to displaying the image after the text on desktop
 */
export type DesktopImageAfterText = boolean;
/**
 * Image description
 */
export type AltText = string;
/**
 * Text content to display inside the element
 */
export type Text = string;
/**
 * Switch text alignment between left and center
 */
export type TextAlignment = "left" | "center";
/**
 * Overwrite the color to use for the text content
 */
export type TextColor = string;
/**
 * Select a vertical alignment for the box
 */
export type BoxVerticalAlignment = "center" | "top" | "bottom";
/**
 * Select a horizontal alignment for the box
 */
export type BoxHorizontalAlignment = "center" | "left" | "right";
/**
 * Additional css classes attached to the wrapping element
 */
export type Class = string;
export type Inverted = boolean;
/**
 * Optional custom component identifier
 */
export type KsComponentAttribute = string;

/**
 * Component to present rich combinations of text and media, best used sequentially
 */
export interface StorytellingProps {
  backgroundImage?: BackgroundImage;
  backgroundColor?: BackgroundColor;
  full?: FullSizeImage;
  image?: Image;
  box: TextBox;
  className?: Class;
  inverted?: Inverted;
  component?: KsComponentAttribute;
}
/**
 * Image displayed alongside the text content
 */
export interface Image {
  source?: ImageSource;
  ratio?: ImageAspectRatio;
  vAlign?: ImageVerticalAlignment;
  hAlign?: ImageHorizontalAlignment;
  order?: Order;
  alt?: AltText;
}
/**
 * Choose what comes first on mobile and desktop: image or text
 */
export interface Order {
  mobileImageLast?: MobileImageAfterText;
  desktopImageLast?: DesktopImageAfterText;
}
/**
 * Text content to display
 */
export interface TextBox {
  headline?: Headline & HeadlineProps;
  text?: Text;
  textAlign?: TextAlignment;
  textColor?: TextColor;
  vAlign?: BoxVerticalAlignment;
  hAlign?: BoxHorizontalAlignment;
  /**
   * Referenced component ButtonProps
   */
  link?: ButtonProps;
}
/**
 * Headline for the box
 */
export interface Headline {
  level?: string;
  styleAs?: string;
  spaceAfter?: string;
  content?: string;
}

}
      